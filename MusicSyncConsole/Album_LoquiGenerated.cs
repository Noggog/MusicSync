/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using MusicRecord.Internals;
using MusicRecord;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace MusicRecord
{
    #region Class
    public partial class Album : 
        IAlbum,
        ILoquiObject<Album>,
        ILoquiObjectSetter,
        IEquatable<Album>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Album_Registration.Instance;
        public static Album_Registration Registration => Album_Registration.Instance;

        #region Ctor
        public Album()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Album_FieldIndex.Name] = false;
            Name = default(String);
        }
        #endregion
        #region SpotifyID
        public String SpotifyID { get; set; }
        protected void UnsetSpotifyID()
        {
            _hasBeenSetTracker[(int)Album_FieldIndex.SpotifyID] = false;
            SpotifyID = default(String);
        }
        #endregion
        #region Tracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<Track> _Tracks = new NotifyingList<Track>();
        public INotifyingList<Track> Tracks => _Tracks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<Track> TracksEnumerable
        {
            get => _Tracks;
            set => _Tracks.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<Track> IAlbum.Tracks => _Tracks;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<Track> IAlbumGetter.Tracks => _Tracks;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => AlbumCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => AlbumCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AlbumCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AlbumCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Album>.GetEqualsMask(Album rhs) => AlbumCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAlbumGetter>.GetEqualsMask(IAlbumGetter rhs) => AlbumCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AlbumCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Album_Mask<bool> printMask = null)
        {
            return AlbumCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AlbumCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Album_Mask<bool> GetHasBeenSetMask()
        {
            return AlbumCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Album rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Album rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.SpotifyID, rhs.SpotifyID)) return false;
            if (!this.Tracks.SequenceEqual(rhs.Tracks)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SpotifyID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Tracks).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Album Create_Xml(
            XElement root,
            Album_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Album Create_Xml(
            XElement root,
            out Album_ErrorMask errorMask,
            bool doMasks = true,
            Album_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Album_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Album Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Album();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Album Create_Xml(
            string path,
            Album_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Album Create_Xml(
            string path,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Album Create_Xml(
            Stream stream,
            Album_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Album Create_Xml(
            Stream stream,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Album_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Album>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Album_ErrorMask errorMask,
            bool doMasks = true,
            Album_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Album_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public virtual void Write_Xml(
            Stream stream,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            Album_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AlbumCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Album item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Album_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpotifyID":
                    try
                    {
                        errorMask?.PushIndex((int)Album_FieldIndex.SpotifyID);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String SpotifyIDParse,
                            errorMask: errorMask))
                        {
                            item.SpotifyID = SpotifyIDParse;
                        }
                        else
                        {
                            item.SpotifyID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Tracks":
                    try
                    {
                        errorMask?.PushIndex((int)Album_FieldIndex.Tracks);
                        if (ListXmlTranslation<Track>.Instance.Parse(
                            root: root,
                            enumer: out var TracksItem,
                            transl: LoquiXmlTranslation<Track>.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Tracks.SetTo(TracksItem);
                        }
                        else
                        {
                            item.Tracks.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Album_FieldIndex)index)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Album Copy(
            Album_CopyMask copyMask = null,
            IAlbumGetter def = null)
        {
            return Album.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Album Copy(
            IAlbum item,
            Album_CopyMask copyMask = null,
            IAlbumGetter def = null)
        {
            Album ret;
            if (item.GetType().Equals(typeof(Album)))
            {
                ret = new Album();
            }
            else
            {
                ret = (Album)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Album Copy_ToLoqui(
            IAlbumGetter item,
            Album_CopyMask copyMask = null,
            IAlbumGetter def = null)
        {
            Album ret;
            if (item.GetType().Equals(typeof(Album)))
            {
                ret = new Album() as Album;
            }
            else
            {
                ret = (Album)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAlbumGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlbumGetter rhs,
            Album_CopyMask copyMask,
            IAlbumGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlbumGetter rhs,
            out Album_ErrorMask errorMask,
            Album_CopyMask copyMask = null,
            IAlbumGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AlbumCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Album_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAlbumGetter rhs,
            ErrorMaskBuilder errorMask,
            Album_CopyMask copyMask = null,
            IAlbumGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AlbumCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Album_FieldIndex.SpotifyID:
                    this.SpotifyID = (String)obj;
                    break;
                case Album_FieldIndex.Tracks:
                    this._Tracks.SetTo((IEnumerable<Track>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AlbumCommon.Clear(this, cmds);
        }


        public static Album Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Album();
            foreach (var pair in fields)
            {
                CopyInInternal_Album(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Album(Album obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Album_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Album_FieldIndex.SpotifyID:
                    obj.SpotifyID = (String)pair.Value;
                    break;
                case Album_FieldIndex.Tracks:
                    obj._Tracks.SetTo((IEnumerable<Track>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Album obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAlbum : IAlbumGetter, ILoquiClass<IAlbum, IAlbumGetter>, ILoquiClass<Album, IAlbumGetter>
    {
        new String Name { get; set; }

        new String SpotifyID { get; set; }

        new INotifyingList<Track> Tracks { get; }
    }

    public partial interface IAlbumGetter : ILoquiObject
    {
        #region Name
        String Name { get; }

        #endregion
        #region SpotifyID
        String SpotifyID { get; }

        #endregion
        #region Tracks
        INotifyingListGetter<Track> Tracks { get; }
        #endregion

    }

    #endregion

}

namespace MusicRecord.Internals
{
    #region Field Index
    public enum Album_FieldIndex
    {
        Name = 0,
        SpotifyID = 1,
        Tracks = 2,
    }
    #endregion

    #region Registration
    public class Album_Registration : ILoquiRegistration
    {
        public static readonly Album_Registration Instance = new Album_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_MusicRecord.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_MusicRecord.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "858e7c12-430e-469d-801a-1cb9718a0117";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(Album_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Album_ErrorMask);

        public static readonly Type ClassType = typeof(Album);

        public static readonly Type GetterType = typeof(IAlbumGetter);

        public static readonly Type SetterType = typeof(IAlbum);

        public static readonly Type CommonType = typeof(AlbumCommon);

        public const string FullName = "MusicRecord.Album";

        public const string Name = "Album";

        public const string Namespace = "MusicRecord";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Album_FieldIndex.Name;
                case "SPOTIFYID":
                    return (ushort)Album_FieldIndex.SpotifyID;
                case "TRACKS":
                    return (ushort)Album_FieldIndex.Tracks;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Tracks:
                    return true;
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Tracks:
                    return true;
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    return "Name";
                case Album_FieldIndex.SpotifyID:
                    return "SpotifyID";
                case Album_FieldIndex.Tracks:
                    return "Tracks";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    return typeof(String);
                case Album_FieldIndex.SpotifyID:
                    return typeof(String);
                case Album_FieldIndex.Tracks:
                    return typeof(NotifyingList<Track>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AlbumCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAlbum item,
            IAlbumGetter rhs,
            IAlbumGetter def,
            ErrorMaskBuilder errorMask,
            Album_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Album_FieldIndex.Name);
                item.Name = rhs.Name;
                errorMask?.PopIndex();
            }
            if (copyMask?.SpotifyID ?? true)
            {
                errorMask?.PushIndex((int)Album_FieldIndex.SpotifyID);
                item.SpotifyID = rhs.SpotifyID;
                errorMask?.PopIndex();
            }
            if (copyMask?.Tracks.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Album_FieldIndex.Tracks);
                try
                {
                    item.Tracks.SetToWithDefault(
                        rhs: rhs.Tracks,
                        def: def?.Tracks,
                        cmds: cmds,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.Tracks.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return Track.Copy(
                                        r,
                                        copyMask?.Tracks?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Tracks.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAlbum obj,
            NotifyingFireParameters cmds = null)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAlbum obj,
            NotifyingUnsetParameters cmds = null)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    obj.Name = default(String);
                    break;
                case Album_FieldIndex.SpotifyID:
                    obj.SpotifyID = default(String);
                    break;
                case Album_FieldIndex.Tracks:
                    obj.Tracks.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAlbum obj)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                case Album_FieldIndex.SpotifyID:
                case Album_FieldIndex.Tracks:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IAlbumGetter obj)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    return obj.Name;
                case Album_FieldIndex.SpotifyID:
                    return obj.SpotifyID;
                case Album_FieldIndex.Tracks:
                    return obj.Tracks;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IAlbum item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name = default(String);
            item.SpotifyID = default(String);
            item.Tracks.Unset(cmds.ToUnsetParams());
        }

        public static Album_Mask<bool> GetEqualsMask(
            this IAlbumGetter item,
            IAlbumGetter rhs)
        {
            var ret = new Album_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAlbumGetter item,
            IAlbumGetter rhs,
            Album_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.SpotifyID = object.Equals(item.SpotifyID, rhs.SpotifyID);
            ret.Tracks = new MaskItem<bool, IEnumerable<MaskItem<bool, Track_Mask<bool>>>>();
            ret.Tracks.Specific = item.Tracks.SelectAgainst<Track, MaskItem<bool, Track_Mask<bool>>>(rhs.Tracks, ((l, r) =>
            {
                MaskItem<bool, Track_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, Track_Mask<bool>>();
                itemRet.Specific = TrackCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.Tracks.Overall);
            ret.Tracks.Overall = ret.Tracks.Overall && ret.Tracks.Specific.All((b) => b.Overall);
        }

        public static string ToString(
            this IAlbumGetter item,
            string name = null,
            Album_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAlbumGetter item,
            FileGeneration fg,
            string name = null,
            Album_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Album)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Album)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.SpotifyID ?? true)
                {
                    fg.AppendLine($"SpotifyID => {item.SpotifyID}");
                }
                if (printMask?.Tracks?.Overall ?? true)
                {
                    fg.AppendLine("Tracks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Tracks)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAlbumGetter item,
            Album_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Album_Mask<bool> GetHasBeenSetMask(IAlbumGetter item)
        {
            var ret = new Album_Mask<bool>();
            ret.Name = true;
            ret.SpotifyID = true;
            ret.Tracks = new MaskItem<bool, IEnumerable<MaskItem<bool, Track_Mask<bool>>>>(item.Tracks.HasBeenSet, item.Tracks.Select((i) => new MaskItem<bool, Track_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Album item,
            bool doMasks,
            out Album_ErrorMask errorMask,
            Album_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Album_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Album item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "MusicRecord.Album");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "MusicRecord.Album");
            }
            if ((translationMask?.GetShouldTranslate((int)Album_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Album_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Album_FieldIndex.SpotifyID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SpotifyID),
                    item: item.SpotifyID,
                    fieldIndex: (int)Album_FieldIndex.SpotifyID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Album_FieldIndex.Tracks) ?? true))
            {
                ListXmlTranslation<Track>.Instance.Write(
                    node: elem,
                    name: nameof(item.Tracks),
                    item: item.Tracks,
                    fieldIndex: (int)Album_FieldIndex.Tracks,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Album_FieldIndex.Tracks),
                    transl: (XElement subNode, Track subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<Track>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Album_Mask<T> : IMask<T>, IEquatable<Album_Mask<T>>
    {
        #region Ctors
        public Album_Mask()
        {
        }

        public Album_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.SpotifyID = initialValue;
            this.Tracks = new MaskItem<T, IEnumerable<MaskItem<T, Track_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T SpotifyID;
        public MaskItem<T, IEnumerable<MaskItem<T, Track_Mask<T>>>> Tracks;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Album_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Album_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.SpotifyID, rhs.SpotifyID)) return false;
            if (!object.Equals(this.Tracks, rhs.Tracks)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.SpotifyID?.GetHashCode());
            ret = ret.CombineHashCode(this.Tracks?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Name)) return false;
            if (!eval(this.SpotifyID)) return false;
            if (this.Tracks != null)
            {
                if (!eval(this.Tracks.Overall)) return false;
                if (this.Tracks.Specific != null)
                {
                    foreach (var item in this.Tracks.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Album_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Album_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Album_Mask<R> obj, Func<T, R> eval)
        {
            obj.Name = eval(this.Name);
            obj.SpotifyID = eval(this.SpotifyID);
            if (Tracks != null)
            {
                obj.Tracks = new MaskItem<R, IEnumerable<MaskItem<R, Track_Mask<R>>>>();
                obj.Tracks.Overall = eval(this.Tracks.Overall);
                if (Tracks.Specific != null)
                {
                    List<MaskItem<R, Track_Mask<R>>> l = new List<MaskItem<R, Track_Mask<R>>>();
                    obj.Tracks.Specific = l;
                    foreach (var item in Tracks.Specific)
                    {
                        MaskItem<R, Track_Mask<R>> mask = default(MaskItem<R, Track_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, Track_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Tracks.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Album_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Album_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Album_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.SpotifyID ?? true)
                {
                    fg.AppendLine($"SpotifyID => {SpotifyID}");
                }
                if (printMask?.Tracks?.Overall ?? true)
                {
                    fg.AppendLine("Tracks =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Tracks.Overall != null)
                        {
                            fg.AppendLine(Tracks.Overall.ToString());
                        }
                        if (Tracks.Specific != null)
                        {
                            foreach (var subItem in Tracks.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Album_ErrorMask : IErrorMask, IErrorMask<Album_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Name;
        public Exception SpotifyID;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, Track_ErrorMask>>> Tracks;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    return Name;
                case Album_FieldIndex.SpotifyID:
                    return SpotifyID;
                case Album_FieldIndex.Tracks:
                    return Tracks;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Album_FieldIndex.SpotifyID:
                    this.SpotifyID = ex;
                    break;
                case Album_FieldIndex.Tracks:
                    this.Tracks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Track_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Album_FieldIndex enu = (Album_FieldIndex)index;
            switch (enu)
            {
                case Album_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Album_FieldIndex.SpotifyID:
                    this.SpotifyID = (Exception)obj;
                    break;
                case Album_FieldIndex.Tracks:
                    this.Tracks = (MaskItem<Exception, IEnumerable<MaskItem<Exception, Track_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (SpotifyID != null) return true;
            if (Tracks != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Album_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"SpotifyID => {SpotifyID}");
            fg.AppendLine("Tracks =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Tracks.Overall != null)
                {
                    fg.AppendLine(Tracks.Overall.ToString());
                }
                if (Tracks.Specific != null)
                {
                    foreach (var subItem in Tracks.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Album_ErrorMask Combine(Album_ErrorMask rhs)
        {
            var ret = new Album_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.SpotifyID = this.SpotifyID.Combine(rhs.SpotifyID);
            ret.Tracks = new MaskItem<Exception, IEnumerable<MaskItem<Exception, Track_ErrorMask>>>(this.Tracks.Overall.Combine(rhs.Tracks.Overall), new List<MaskItem<Exception, Track_ErrorMask>>(this.Tracks.Specific.And(rhs.Tracks.Specific)));
            return ret;
        }
        public static Album_ErrorMask Combine(Album_ErrorMask lhs, Album_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Album_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Album_ErrorMask();
        }
        #endregion

    }
    public class Album_CopyMask
    {
        #region Members
        public bool Name;
        public bool SpotifyID;
        public MaskItem<CopyOption, Track_CopyMask> Tracks;
        #endregion

    }
    public class Album_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public bool SpotifyID;
        public MaskItem<bool, Track_TranslationMask> Tracks;
        #endregion

        #region Ctors
        public Album_TranslationMask()
        {
        }

        public Album_TranslationMask(bool defaultOn)
        {
            this.Name = defaultOn;
            this.SpotifyID = defaultOn;
            this.Tracks = new MaskItem<bool, Track_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Name, null));
            ret.Add((SpotifyID, null));
            ret.Add((Tracks?.Overall ?? true, Tracks?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
