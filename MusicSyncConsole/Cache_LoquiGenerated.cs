/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using MusicRecord.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace MusicRecord
{
    #region Class
    public partial class Cache : 
        ICache,
        ILoquiObject<Cache>,
        ILoquiObjectSetter,
        IEquatable<Cache>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cache_Registration.Instance;
        public static Cache_Registration Registration => Cache_Registration.Instance;

        #region Ctor
        public Cache()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Albums
        private readonly INotifyingKeyedCollection<String, AlbumCacheItem> _Albums = new NotifyingKeyedCollection<String, AlbumCacheItem>((item) => item.ID);
        public INotifyingKeyedCollection<String, AlbumCacheItem> Albums => _Albums;
        #region Interface Members
        INotifyingKeyedCollection<String, AlbumCacheItem> ICache.Albums => _Albums;
        INotifyingKeyedCollectionGetter<String, AlbumCacheItem> ICacheGetter.Albums => _Albums;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => CacheCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => CacheCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => CacheCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            CacheCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Cache>.GetEqualsMask(Cache rhs) => CacheCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ICacheGetter>.GetEqualsMask(ICacheGetter rhs) => CacheCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return CacheCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Cache_Mask<bool> printMask = null)
        {
            return CacheCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            CacheCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Cache_Mask<bool> GetHasBeenSetMask()
        {
            return CacheCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Cache rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cache rhs)
        {
            if (rhs == null) return false;
            if (!this.Albums.SequenceEqual(rhs.Albums)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Albums).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Cache Create_Xml(
            XElement root,
            Cache_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Cache Create_Xml(
            XElement root,
            out Cache_ErrorMask errorMask,
            bool doMasks = true,
            Cache_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Cache_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Cache Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Cache();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Cache Create_Xml(
            string path,
            Cache_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Cache Create_Xml(
            string path,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Cache Create_Xml(
            Stream stream,
            Cache_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Cache Create_Xml(
            Stream stream,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Cache_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Cache>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Cache_ErrorMask errorMask,
            bool doMasks = true,
            Cache_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cache_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public virtual void Write_Xml(
            Stream stream,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            Cache_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            CacheCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Cache item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Albums":
                    KeyedDictXmlTranslation<String, AlbumCacheItem>.Instance.ParseInto(
                        root: root,
                        item: item.Albums,
                        fieldIndex: (int)Cache_FieldIndex.Albums,
                        errorMask: errorMask,
                        translationMask: translationMask,
                        valTransl: LoquiXmlTranslation<AlbumCacheItem>.Instance.Parse);
                    break;
                default:
                    break;
            }
        }

        #endregion

        public Cache Copy(
            Cache_CopyMask copyMask = null,
            ICacheGetter def = null)
        {
            return Cache.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Cache Copy(
            ICache item,
            Cache_CopyMask copyMask = null,
            ICacheGetter def = null)
        {
            Cache ret;
            if (item.GetType().Equals(typeof(Cache)))
            {
                ret = new Cache();
            }
            else
            {
                ret = (Cache)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Cache Copy_ToLoqui(
            ICacheGetter item,
            Cache_CopyMask copyMask = null,
            ICacheGetter def = null)
        {
            Cache ret;
            if (item.GetType().Equals(typeof(Cache)))
            {
                ret = new Cache() as Cache;
            }
            else
            {
                ret = (Cache)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ICacheGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICacheGetter rhs,
            Cache_CopyMask copyMask,
            ICacheGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ICacheGetter rhs,
            out Cache_ErrorMask errorMask,
            Cache_CopyMask copyMask = null,
            ICacheGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CacheCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Cache_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ICacheGetter rhs,
            ErrorMaskBuilder errorMask,
            Cache_CopyMask copyMask = null,
            ICacheGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            CacheCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    this.Albums.SetTo(
                        ((IEnumerable<AlbumCacheItem>)(NotifyingDictionary<String, AlbumCacheItem>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            CacheCommon.Clear(this, cmds);
        }


        public static Cache Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Cache();
            foreach (var pair in fields)
            {
                CopyInInternal_Cache(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Cache(Cache obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Cache_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    obj.Albums.SetTo(
                        ((IEnumerable<AlbumCacheItem>)(NotifyingDictionary<String, AlbumCacheItem>)pair.Value),
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Cache obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ICache : ICacheGetter, ILoquiClass<ICache, ICacheGetter>, ILoquiClass<Cache, ICacheGetter>
    {
        new INotifyingKeyedCollection<String, AlbumCacheItem> Albums { get; }
    }

    public partial interface ICacheGetter : ILoquiObject
    {
        #region Albums
        INotifyingKeyedCollectionGetter<String, AlbumCacheItem> Albums { get; }
        #endregion

    }

    #endregion

}

namespace MusicRecord.Internals
{
    #region Field Index
    public enum Cache_FieldIndex
    {
        Albums = 0,
    }
    #endregion

    #region Registration
    public class Cache_Registration : ILoquiRegistration
    {
        public static readonly Cache_Registration Instance = new Cache_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_MusicRecord.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_MusicRecord.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "633248fe-51e9-4a09-8caa-c7c40b8b9edb";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(Cache_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cache_ErrorMask);

        public static readonly Type ClassType = typeof(Cache);

        public static readonly Type GetterType = typeof(ICacheGetter);

        public static readonly Type SetterType = typeof(ICache);

        public static readonly Type CommonType = typeof(CacheCommon);

        public const string FullName = "MusicRecord.Cache";

        public const string Name = "Cache";

        public const string Namespace = "MusicRecord";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ALBUMS":
                    return (ushort)Cache_FieldIndex.Albums;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return "Albums";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return typeof(NotifyingDictionary<String, AlbumCacheItem>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class CacheCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ICache item,
            ICacheGetter rhs,
            ICacheGetter def,
            ErrorMaskBuilder errorMask,
            Cache_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Albums.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Cache_FieldIndex.Albums);
                try
                {
                    item.Albums.SetToWithDefault(
                        rhs.Albums,
                        def?.Albums,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Albums.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return AlbumCacheItem.Copy(
                                        r,
                                        copyMask?.Albums?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Albums.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ICache obj,
            NotifyingFireParameters cmds = null)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ICache obj,
            NotifyingUnsetParameters cmds = null)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    obj.Albums.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ICache obj)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ICacheGetter obj)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return obj.Albums;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ICache item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Albums.Unset(cmds.ToUnsetParams());
        }

        public static Cache_Mask<bool> GetEqualsMask(
            this ICacheGetter item,
            ICacheGetter rhs)
        {
            var ret = new Cache_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ICacheGetter item,
            ICacheGetter rhs,
            Cache_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Albums = new MaskItem<bool, IEnumerable<MaskItem<bool, AlbumCacheItem_Mask<bool>>>>();
            ret.Albums.Specific = item.Albums.Values.SelectAgainst<AlbumCacheItem, MaskItem<bool, AlbumCacheItem_Mask<bool>>>(rhs.Albums.Values, ((l, r) =>
            {
                MaskItem<bool, AlbumCacheItem_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, AlbumCacheItem_Mask<bool>>();
                itemRet.Specific = AlbumCacheItemCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.Albums.Overall);
            ret.Albums.Overall = ret.Albums.Overall && ret.Albums.Specific.All((b) => b.Overall);
        }

        public static string ToString(
            this ICacheGetter item,
            string name = null,
            Cache_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ICacheGetter item,
            FileGeneration fg,
            string name = null,
            Cache_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Cache)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Cache)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Albums?.Overall ?? true)
                {
                    fg.AppendLine("Albums =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Albums.Values)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ICacheGetter item,
            Cache_Mask<bool?> checkMask)
        {
            return true;
        }

        public static Cache_Mask<bool> GetHasBeenSetMask(ICacheGetter item)
        {
            var ret = new Cache_Mask<bool>();
            ret.Albums = new MaskItem<bool, IEnumerable<MaskItem<bool, AlbumCacheItem_Mask<bool>>>>(item.Albums.HasBeenSet, item.Albums.Values.Select((i) => new MaskItem<bool, AlbumCacheItem_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Cache item,
            bool doMasks,
            out Cache_ErrorMask errorMask,
            Cache_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Cache_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Cache item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "MusicRecord.Cache");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "MusicRecord.Cache");
            }
            if ((translationMask?.GetShouldTranslate((int)Cache_FieldIndex.Albums) ?? true))
            {
                try
                {
                    errorMask?.PushIndex((int)Cache_FieldIndex.Albums);
                    KeyedDictXmlTranslation<String, AlbumCacheItem>.Instance.Write(
                        node: elem,
                        name: nameof(item.Albums),
                        items: item.Albums.Values,
                        translationMask: translationMask,
                        errorMask: errorMask,
                        valTransl: (XElement subNode, AlbumCacheItem subItem, ErrorMaskBuilder dictSubMask, TranslationCrystal dictTranslMask) =>
                        {
                            LoquiXmlTranslation<AlbumCacheItem>.Instance.Write(
                                node: subNode,
                                item: subItem,
                                name: null,
                                errorMask: dictSubMask,
                                translationMask: dictTranslMask);
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Cache_Mask<T> : IMask<T>, IEquatable<Cache_Mask<T>>
    {
        #region Ctors
        public Cache_Mask()
        {
        }

        public Cache_Mask(T initialValue)
        {
            this.Albums = new MaskItem<T, IEnumerable<MaskItem<T, AlbumCacheItem_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, IEnumerable<MaskItem<T, AlbumCacheItem_Mask<T>>>> Albums;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Cache_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Cache_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Albums, rhs.Albums)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Albums?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (this.Albums != null)
            {
                if (!eval(this.Albums.Overall)) return false;
                if (this.Albums.Specific != null)
                {
                    foreach (var item in this.Albums.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Cache_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Cache_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Cache_Mask<R> obj, Func<T, R> eval)
        {
            if (Albums != null)
            {
                obj.Albums = new MaskItem<R, IEnumerable<MaskItem<R, AlbumCacheItem_Mask<R>>>>();
                obj.Albums.Overall = eval(this.Albums.Overall);
                if (Albums.Specific != null)
                {
                    List<MaskItem<R, AlbumCacheItem_Mask<R>>> l = new List<MaskItem<R, AlbumCacheItem_Mask<R>>>();
                    obj.Albums.Specific = l;
                    foreach (var item in Albums.Specific)
                    {
                        MaskItem<R, AlbumCacheItem_Mask<R>> mask = default(MaskItem<R, AlbumCacheItem_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, AlbumCacheItem_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Albums.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Cache_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Cache_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Cache_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Albums?.Overall ?? true)
                {
                    fg.AppendLine("Albums =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Albums.Overall != null)
                        {
                            fg.AppendLine(Albums.Overall.ToString());
                        }
                        if (Albums.Specific != null)
                        {
                            foreach (var subItem in Albums.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($"ID => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Cache_ErrorMask : IErrorMask, IErrorMask<Cache_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, AlbumCacheItem_ErrorMask>>> Albums;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    return Albums;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    this.Albums = new MaskItem<Exception, IEnumerable<MaskItem<Exception, AlbumCacheItem_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Cache_FieldIndex enu = (Cache_FieldIndex)index;
            switch (enu)
            {
                case Cache_FieldIndex.Albums:
                    this.Albums = (MaskItem<Exception, IEnumerable<MaskItem<Exception, AlbumCacheItem_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Albums != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Cache_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine("Albums =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Albums.Overall != null)
                {
                    fg.AppendLine(Albums.Overall.ToString());
                }
                if (Albums.Specific != null)
                {
                    foreach (var subItem in Albums.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"ID => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Cache_ErrorMask Combine(Cache_ErrorMask rhs)
        {
            var ret = new Cache_ErrorMask();
            ret.Albums = new MaskItem<Exception, IEnumerable<MaskItem<Exception, AlbumCacheItem_ErrorMask>>>(this.Albums.Overall.Combine(rhs.Albums.Overall), new List<MaskItem<Exception, AlbumCacheItem_ErrorMask>>(this.Albums.Specific.And(rhs.Albums.Specific)));
            return ret;
        }
        public static Cache_ErrorMask Combine(Cache_ErrorMask lhs, Cache_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Cache_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Cache_ErrorMask();
        }
        #endregion

    }
    public class Cache_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, AlbumCacheItem_CopyMask> Albums;
        #endregion

    }
    public class Cache_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, AlbumCacheItem_TranslationMask> Albums;
        #endregion

        #region Ctors
        public Cache_TranslationMask()
        {
        }

        public Cache_TranslationMask(bool defaultOn)
        {
            this.Albums = new MaskItem<bool, AlbumCacheItem_TranslationMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Albums?.Overall ?? true, Albums?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
