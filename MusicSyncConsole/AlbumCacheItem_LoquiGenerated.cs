/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using MusicRecord.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace MusicRecord
{
    #region Class
    public partial class AlbumCacheItem : 
        IAlbumCacheItem,
        ILoquiObject<AlbumCacheItem>,
        ILoquiObjectSetter,
        IEquatable<AlbumCacheItem>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AlbumCacheItem_Registration.Instance;
        public static AlbumCacheItem_Registration Registration => AlbumCacheItem_Registration.Instance;

        #region Ctor
        public AlbumCacheItem()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public String ID { get; set; }
        protected void UnsetID()
        {
            _hasBeenSetTracker[(int)AlbumCacheItem_FieldIndex.ID] = false;
            ID = default(String);
        }
        #endregion
        #region Artists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<String> _Artists = new NotifyingList<String>();
        public INotifyingList<String> Artists => _Artists;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> ArtistsEnumerable
        {
            get => _Artists;
            set => _Artists.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<String> IAlbumCacheItem.Artists => _Artists;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<String> IAlbumCacheItemGetter.Artists => _Artists;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => AlbumCacheItemCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => AlbumCacheItemCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => AlbumCacheItemCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            AlbumCacheItemCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<AlbumCacheItem>.GetEqualsMask(AlbumCacheItem rhs) => AlbumCacheItemCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<IAlbumCacheItemGetter>.GetEqualsMask(IAlbumCacheItemGetter rhs) => AlbumCacheItemCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return AlbumCacheItemCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            AlbumCacheItem_Mask<bool> printMask = null)
        {
            return AlbumCacheItemCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            AlbumCacheItemCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public AlbumCacheItem_Mask<bool> GetHasBeenSetMask()
        {
            return AlbumCacheItemCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is AlbumCacheItem rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlbumCacheItem rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ID, rhs.ID)) return false;
            if (!this.Artists.SequenceEqual(rhs.Artists)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Artists).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static AlbumCacheItem Create_Xml(
            XElement root,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static AlbumCacheItem Create_Xml(
            XElement root,
            out AlbumCacheItem_ErrorMask errorMask,
            bool doMasks = true,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = AlbumCacheItem_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static AlbumCacheItem Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new AlbumCacheItem();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static AlbumCacheItem Create_Xml(
            string path,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AlbumCacheItem Create_Xml(
            string path,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static AlbumCacheItem Create_Xml(
            Stream stream,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static AlbumCacheItem Create_Xml(
            Stream stream,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = AlbumCacheItem_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<AlbumCacheItem>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out AlbumCacheItem_ErrorMask errorMask,
            bool doMasks = true,
            AlbumCacheItem_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlbumCacheItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public virtual void Write_Xml(
            Stream stream,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            AlbumCacheItem_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            AlbumCacheItemCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            AlbumCacheItem item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "ID":
                    try
                    {
                        errorMask?.PushIndex((int)AlbumCacheItem_FieldIndex.ID);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String IDParse,
                            errorMask: errorMask))
                        {
                            item.ID = IDParse;
                        }
                        else
                        {
                            item.ID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Artists":
                    try
                    {
                        errorMask?.PushIndex((int)AlbumCacheItem_FieldIndex.Artists);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            root: root,
                            enumer: out var ArtistsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Artists.SetTo(ArtistsItem);
                        }
                        else
                        {
                            item.Artists.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((AlbumCacheItem_FieldIndex)index)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public AlbumCacheItem Copy(
            AlbumCacheItem_CopyMask copyMask = null,
            IAlbumCacheItemGetter def = null)
        {
            return AlbumCacheItem.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static AlbumCacheItem Copy(
            IAlbumCacheItem item,
            AlbumCacheItem_CopyMask copyMask = null,
            IAlbumCacheItemGetter def = null)
        {
            AlbumCacheItem ret;
            if (item.GetType().Equals(typeof(AlbumCacheItem)))
            {
                ret = new AlbumCacheItem();
            }
            else
            {
                ret = (AlbumCacheItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static AlbumCacheItem Copy_ToLoqui(
            IAlbumCacheItemGetter item,
            AlbumCacheItem_CopyMask copyMask = null,
            IAlbumCacheItemGetter def = null)
        {
            AlbumCacheItem ret;
            if (item.GetType().Equals(typeof(AlbumCacheItem)))
            {
                ret = new AlbumCacheItem() as AlbumCacheItem;
            }
            else
            {
                ret = (AlbumCacheItem)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IAlbumCacheItemGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlbumCacheItemGetter rhs,
            AlbumCacheItem_CopyMask copyMask,
            IAlbumCacheItemGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IAlbumCacheItemGetter rhs,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_CopyMask copyMask = null,
            IAlbumCacheItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AlbumCacheItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = AlbumCacheItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IAlbumCacheItemGetter rhs,
            ErrorMaskBuilder errorMask,
            AlbumCacheItem_CopyMask copyMask = null,
            IAlbumCacheItemGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            AlbumCacheItemCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    this.ID = (String)obj;
                    break;
                case AlbumCacheItem_FieldIndex.Artists:
                    this._Artists.SetTo((IEnumerable<String>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            AlbumCacheItemCommon.Clear(this, cmds);
        }


        public static AlbumCacheItem Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new AlbumCacheItem();
            foreach (var pair in fields)
            {
                CopyInInternal_AlbumCacheItem(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_AlbumCacheItem(AlbumCacheItem obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out AlbumCacheItem_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    obj.ID = (String)pair.Value;
                    break;
                case AlbumCacheItem_FieldIndex.Artists:
                    obj._Artists.SetTo((IEnumerable<String>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, AlbumCacheItem obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IAlbumCacheItem : IAlbumCacheItemGetter, ILoquiClass<IAlbumCacheItem, IAlbumCacheItemGetter>, ILoquiClass<AlbumCacheItem, IAlbumCacheItemGetter>
    {
        new String ID { get; set; }

        new INotifyingList<String> Artists { get; }
    }

    public partial interface IAlbumCacheItemGetter : ILoquiObject
    {
        #region ID
        String ID { get; }

        #endregion
        #region Artists
        INotifyingListGetter<String> Artists { get; }
        #endregion

    }

    #endregion

}

namespace MusicRecord.Internals
{
    #region Field Index
    public enum AlbumCacheItem_FieldIndex
    {
        ID = 0,
        Artists = 1,
    }
    #endregion

    #region Registration
    public class AlbumCacheItem_Registration : ILoquiRegistration
    {
        public static readonly AlbumCacheItem_Registration Instance = new AlbumCacheItem_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_MusicRecord.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_MusicRecord.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "1f261d34-de71-417e-ad3c-9b8df4033e33";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(AlbumCacheItem_Mask<>);

        public static readonly Type ErrorMaskType = typeof(AlbumCacheItem_ErrorMask);

        public static readonly Type ClassType = typeof(AlbumCacheItem);

        public static readonly Type GetterType = typeof(IAlbumCacheItemGetter);

        public static readonly Type SetterType = typeof(IAlbumCacheItem);

        public static readonly Type CommonType = typeof(AlbumCacheItemCommon);

        public const string FullName = "MusicRecord.AlbumCacheItem";

        public const string Name = "AlbumCacheItem";

        public const string Namespace = "MusicRecord";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "ID":
                    return (ushort)AlbumCacheItem_FieldIndex.ID;
                case "ARTISTS":
                    return (ushort)AlbumCacheItem_FieldIndex.Artists;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.Artists:
                    return true;
                case AlbumCacheItem_FieldIndex.ID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    return "ID";
                case AlbumCacheItem_FieldIndex.Artists:
                    return "Artists";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    return typeof(String);
                case AlbumCacheItem_FieldIndex.Artists:
                    return typeof(NotifyingList<String>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class AlbumCacheItemCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IAlbumCacheItem item,
            IAlbumCacheItemGetter rhs,
            IAlbumCacheItemGetter def,
            ErrorMaskBuilder errorMask,
            AlbumCacheItem_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.ID ?? true)
            {
                errorMask?.PushIndex((int)AlbumCacheItem_FieldIndex.ID);
                item.ID = rhs.ID;
                errorMask?.PopIndex();
            }
            if (copyMask?.Artists != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)AlbumCacheItem_FieldIndex.Artists);
                try
                {
                    item.Artists.SetToWithDefault(
                        rhs.Artists,
                        def?.Artists,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IAlbumCacheItem obj,
            NotifyingFireParameters cmds = null)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IAlbumCacheItem obj,
            NotifyingUnsetParameters cmds = null)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    obj.ID = default(String);
                    break;
                case AlbumCacheItem_FieldIndex.Artists:
                    obj.Artists.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IAlbumCacheItem obj)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                case AlbumCacheItem_FieldIndex.Artists:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IAlbumCacheItemGetter obj)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    return obj.ID;
                case AlbumCacheItem_FieldIndex.Artists:
                    return obj.Artists;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IAlbumCacheItem item,
            NotifyingUnsetParameters cmds = null)
        {
            item.ID = default(String);
            item.Artists.Unset(cmds.ToUnsetParams());
        }

        public static AlbumCacheItem_Mask<bool> GetEqualsMask(
            this IAlbumCacheItemGetter item,
            IAlbumCacheItemGetter rhs)
        {
            var ret = new AlbumCacheItem_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            IAlbumCacheItemGetter item,
            IAlbumCacheItemGetter rhs,
            AlbumCacheItem_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ID = object.Equals(item.ID, rhs.ID);
            ret.Artists = new MaskItem<bool, IEnumerable<bool>>();
            ret.Artists.Specific = item.Artists.SelectAgainst<String, bool>(rhs.Artists, ((l, r) => object.Equals(l, r)), out ret.Artists.Overall);
            ret.Artists.Overall = ret.Artists.Overall && ret.Artists.Specific.All((b) => b);
        }

        public static string ToString(
            this IAlbumCacheItemGetter item,
            string name = null,
            AlbumCacheItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IAlbumCacheItemGetter item,
            FileGeneration fg,
            string name = null,
            AlbumCacheItem_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(AlbumCacheItem)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(AlbumCacheItem)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ID ?? true)
                {
                    fg.AppendLine($"ID => {item.ID}");
                }
                if (printMask?.Artists?.Overall ?? true)
                {
                    fg.AppendLine("Artists =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Artists)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IAlbumCacheItemGetter item,
            AlbumCacheItem_Mask<bool?> checkMask)
        {
            if (checkMask.Artists.Overall.HasValue && checkMask.Artists.Overall.Value != item.Artists.HasBeenSet) return false;
            return true;
        }

        public static AlbumCacheItem_Mask<bool> GetHasBeenSetMask(IAlbumCacheItemGetter item)
        {
            var ret = new AlbumCacheItem_Mask<bool>();
            ret.ID = true;
            ret.Artists = new MaskItem<bool, IEnumerable<bool>>(item.Artists.HasBeenSet, null);
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            AlbumCacheItem item,
            bool doMasks,
            out AlbumCacheItem_ErrorMask errorMask,
            AlbumCacheItem_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = AlbumCacheItem_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            AlbumCacheItem item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "MusicRecord.AlbumCacheItem");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "MusicRecord.AlbumCacheItem");
            }
            if ((translationMask?.GetShouldTranslate((int)AlbumCacheItem_FieldIndex.ID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.ID),
                    item: item.ID,
                    fieldIndex: (int)AlbumCacheItem_FieldIndex.ID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)AlbumCacheItem_FieldIndex.Artists) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: elem,
                    name: nameof(item.Artists),
                    item: item.Artists,
                    fieldIndex: (int)AlbumCacheItem_FieldIndex.Artists,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)AlbumCacheItem_FieldIndex.Artists),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class AlbumCacheItem_Mask<T> : IMask<T>, IEquatable<AlbumCacheItem_Mask<T>>
    {
        #region Ctors
        public AlbumCacheItem_Mask()
        {
        }

        public AlbumCacheItem_Mask(T initialValue)
        {
            this.ID = initialValue;
            this.Artists = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ID;
        public MaskItem<T, IEnumerable<T>> Artists;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is AlbumCacheItem_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(AlbumCacheItem_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ID, rhs.ID)) return false;
            if (!object.Equals(this.Artists, rhs.Artists)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ID?.GetHashCode());
            ret = ret.CombineHashCode(this.Artists?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ID)) return false;
            if (this.Artists != null)
            {
                if (!eval(this.Artists.Overall)) return false;
                if (this.Artists.Specific != null)
                {
                    foreach (var item in this.Artists.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public AlbumCacheItem_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new AlbumCacheItem_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(AlbumCacheItem_Mask<R> obj, Func<T, R> eval)
        {
            obj.ID = eval(this.ID);
            if (Artists != null)
            {
                obj.Artists = new MaskItem<R, IEnumerable<R>>();
                obj.Artists.Overall = eval(this.Artists.Overall);
                if (Artists.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Artists.Specific = l;
                    foreach (var item in Artists.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Artists.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(AlbumCacheItem_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, AlbumCacheItem_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(AlbumCacheItem_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ID ?? true)
                {
                    fg.AppendLine($"ID => {ID}");
                }
                if (printMask?.Artists?.Overall ?? true)
                {
                    fg.AppendLine("Artists =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Artists.Overall != null)
                        {
                            fg.AppendLine(Artists.Overall.ToString());
                        }
                        if (Artists.Specific != null)
                        {
                            foreach (var subItem in Artists.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class AlbumCacheItem_ErrorMask : IErrorMask, IErrorMask<AlbumCacheItem_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ID;
        public MaskItem<Exception, IEnumerable<Exception>> Artists;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    return ID;
                case AlbumCacheItem_FieldIndex.Artists:
                    return Artists;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    this.ID = ex;
                    break;
                case AlbumCacheItem_FieldIndex.Artists:
                    this.Artists = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            AlbumCacheItem_FieldIndex enu = (AlbumCacheItem_FieldIndex)index;
            switch (enu)
            {
                case AlbumCacheItem_FieldIndex.ID:
                    this.ID = (Exception)obj;
                    break;
                case AlbumCacheItem_FieldIndex.Artists:
                    this.Artists = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (ID != null) return true;
            if (Artists != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("AlbumCacheItem_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ID => {ID}");
            fg.AppendLine("Artists =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Artists.Overall != null)
                {
                    fg.AppendLine(Artists.Overall.ToString());
                }
                if (Artists.Specific != null)
                {
                    foreach (var subItem in Artists.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public AlbumCacheItem_ErrorMask Combine(AlbumCacheItem_ErrorMask rhs)
        {
            var ret = new AlbumCacheItem_ErrorMask();
            ret.ID = this.ID.Combine(rhs.ID);
            ret.Artists = new MaskItem<Exception, IEnumerable<Exception>>(this.Artists.Overall.Combine(rhs.Artists.Overall), new List<Exception>(this.Artists.Specific.And(rhs.Artists.Specific)));
            return ret;
        }
        public static AlbumCacheItem_ErrorMask Combine(AlbumCacheItem_ErrorMask lhs, AlbumCacheItem_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static AlbumCacheItem_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new AlbumCacheItem_ErrorMask();
        }
        #endregion

    }
    public class AlbumCacheItem_CopyMask
    {
        #region Members
        public bool ID;
        public CopyOption Artists;
        #endregion

    }
    public class AlbumCacheItem_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool ID;
        public bool Artists;
        #endregion

        #region Ctors
        public AlbumCacheItem_TranslationMask()
        {
        }

        public AlbumCacheItem_TranslationMask(bool defaultOn)
        {
            this.ID = defaultOn;
            this.Artists = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((ID, null));
            ret.Add((Artists, null));
        }
    }
    #endregion

    #endregion

}
