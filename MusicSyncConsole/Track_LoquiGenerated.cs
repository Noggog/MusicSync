/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using MusicRecord.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace MusicRecord
{
    #region Class
    public partial class Track : 
        ITrack,
        ILoquiObject<Track>,
        ILoquiObjectSetter,
        IEquatable<Track>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Track_Registration.Instance;
        public static Track_Registration Registration => Track_Registration.Instance;

        #region Ctor
        public Track()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        public String Name { get; set; }
        protected void UnsetName()
        {
            _hasBeenSetTracker[(int)Track_FieldIndex.Name] = false;
            Name = default(String);
        }
        #endregion
        #region Liked
        public Boolean Liked { get; set; }
        protected void UnsetLiked()
        {
            _hasBeenSetTracker[(int)Track_FieldIndex.Liked] = false;
            Liked = default(Boolean);
        }
        #endregion
        #region SpotifyID
        public String SpotifyID { get; set; }
        protected void UnsetSpotifyID()
        {
            _hasBeenSetTracker[(int)Track_FieldIndex.SpotifyID] = false;
            SpotifyID = default(String);
        }
        #endregion
        #region Tags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly INotifyingList<String> _Tags = new NotifyingList<String>();
        public INotifyingList<String> Tags => _Tags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<String> TagsEnumerable
        {
            get => _Tags;
            set => _Tags.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingList<String> ITrack.Tags => _Tags;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INotifyingListGetter<String> ITrackGetter.Tags => _Tags;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TrackCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TrackCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TrackCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TrackCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<Track>.GetEqualsMask(Track rhs) => TrackCommon.GetEqualsMask(this, rhs);
        IMask<bool> IEqualsMask<ITrackGetter>.GetEqualsMask(ITrackGetter rhs) => TrackCommon.GetEqualsMask(this, rhs);
        #region To String
        public override string ToString()
        {
            return TrackCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            Track_Mask<bool> printMask = null)
        {
            return TrackCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TrackCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public Track_Mask<bool> GetHasBeenSetMask()
        {
            return TrackCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is Track rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Track rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (this.Liked != rhs.Liked) return false;
            if (!object.Equals(this.SpotifyID, rhs.SpotifyID)) return false;
            if (!this.Tags.SequenceEqual(rhs.Tags)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(Name).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Liked).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(SpotifyID).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Tags).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static Track Create_Xml(
            XElement root,
            Track_TranslationMask translationMask = null)
        {
            return Create_Xml(
                root: root,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static Track Create_Xml(
            XElement root,
            out Track_ErrorMask errorMask,
            bool doMasks = true,
            Track_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = Track_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static Track Create_Xml(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new Track();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_Xml_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static Track Create_Xml(
            string path,
            Track_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Track Create_Xml(
            string path,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(path).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static Track Create_Xml(
            Stream stream,
            Track_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                translationMask: translationMask);
        }

        public static Track Create_Xml(
            Stream stream,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask = null)
        {
            var root = XDocument.Load(stream).Root;
            return Create_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement root,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                root: root,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement root,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                root: root,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = Track_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement root,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<Track>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                root: root,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out Track_ErrorMask errorMask,
            bool doMasks = true,
            Track_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Track_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public virtual void Write_Xml(
            Stream stream,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml(
                node: topNode,
                name: name,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            topNode.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            string name = null,
            Track_TranslationMask translationMask = null)
        {
            this.Write_Xml_Internal(
                node: node,
                name: name,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            using (var fs = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.None))
            {
                topNode.Elements().First().Save(fs);
            }
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            XElement topNode = new XElement("topnode");
            Write_Xml_Internal(
                node: topNode,
                name: name,
                errorMask: null,
                translationMask: null);
            topNode.Elements().First().Save(stream);
        }

        protected void Write_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TrackCommon.Write_Xml(
                item: this,
                node: node,
                name: name,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void Fill_Xml_Internal(
            Track item,
            XElement root,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "Name":
                    try
                    {
                        errorMask?.PushIndex((int)Track_FieldIndex.Name);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String NameParse,
                            errorMask: errorMask))
                        {
                            item.Name = NameParse;
                        }
                        else
                        {
                            item.Name = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Liked":
                    try
                    {
                        errorMask?.PushIndex((int)Track_FieldIndex.Liked);
                        if (BooleanXmlTranslation.Instance.Parse(
                            root: root,
                            item: out Boolean LikedParse,
                            errorMask: errorMask))
                        {
                            item.Liked = LikedParse;
                        }
                        else
                        {
                            item.Liked = default(Boolean);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "SpotifyID":
                    try
                    {
                        errorMask?.PushIndex((int)Track_FieldIndex.SpotifyID);
                        if (StringXmlTranslation.Instance.Parse(
                            root: root,
                            item: out String SpotifyIDParse,
                            errorMask: errorMask))
                        {
                            item.SpotifyID = SpotifyIDParse;
                        }
                        else
                        {
                            item.SpotifyID = default(String);
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                case "Tags":
                    try
                    {
                        errorMask?.PushIndex((int)Track_FieldIndex.Tags);
                        if (ListXmlTranslation<String>.Instance.Parse(
                            root: root,
                            enumer: out var TagsItem,
                            transl: StringXmlTranslation.Instance.Parse,
                            errorMask: errorMask,
                            translationMask: translationMask))
                        {
                            item.Tags.SetTo(TagsItem);
                        }
                        else
                        {
                            item.Tags.Unset();
                        }
                    }
                    catch (Exception ex)
                    when (errorMask != null)
                    {
                        errorMask.ReportException(ex);
                    }
                    finally
                    {
                        errorMask?.PopIndex();
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((Track_FieldIndex)index)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public Track Copy(
            Track_CopyMask copyMask = null,
            ITrackGetter def = null)
        {
            return Track.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static Track Copy(
            ITrack item,
            Track_CopyMask copyMask = null,
            ITrackGetter def = null)
        {
            Track ret;
            if (item.GetType().Equals(typeof(Track)))
            {
                ret = new Track();
            }
            else
            {
                ret = (Track)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static Track Copy_ToLoqui(
            ITrackGetter item,
            Track_CopyMask copyMask = null,
            ITrackGetter def = null)
        {
            Track ret;
            if (item.GetType().Equals(typeof(Track)))
            {
                ret = new Track() as Track;
            }
            else
            {
                ret = (Track)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            ITrackGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITrackGetter rhs,
            Track_CopyMask copyMask,
            ITrackGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITrackGetter rhs,
            out Track_ErrorMask errorMask,
            Track_CopyMask copyMask = null,
            ITrackGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TrackCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = Track_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ITrackGetter rhs,
            ErrorMaskBuilder errorMask,
            Track_CopyMask copyMask = null,
            ITrackGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            TrackCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    this.Name = (String)obj;
                    break;
                case Track_FieldIndex.Liked:
                    this.Liked = (Boolean)obj;
                    break;
                case Track_FieldIndex.SpotifyID:
                    this.SpotifyID = (String)obj;
                    break;
                case Track_FieldIndex.Tags:
                    this._Tags.SetTo((IEnumerable<String>)obj, cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TrackCommon.Clear(this, cmds);
        }


        public static Track Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new Track();
            foreach (var pair in fields)
            {
                CopyInInternal_Track(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_Track(Track obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out Track_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    obj.Name = (String)pair.Value;
                    break;
                case Track_FieldIndex.Liked:
                    obj.Liked = (Boolean)pair.Value;
                    break;
                case Track_FieldIndex.SpotifyID:
                    obj.SpotifyID = (String)pair.Value;
                    break;
                case Track_FieldIndex.Tags:
                    obj._Tags.SetTo((IEnumerable<String>)pair.Value, null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, Track obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITrack : ITrackGetter, ILoquiClass<ITrack, ITrackGetter>, ILoquiClass<Track, ITrackGetter>
    {
        new String Name { get; set; }

        new Boolean Liked { get; set; }

        new String SpotifyID { get; set; }

        new INotifyingList<String> Tags { get; }
    }

    public partial interface ITrackGetter : ILoquiObject
    {
        #region Name
        String Name { get; }

        #endregion
        #region Liked
        Boolean Liked { get; }

        #endregion
        #region SpotifyID
        String SpotifyID { get; }

        #endregion
        #region Tags
        INotifyingListGetter<String> Tags { get; }
        #endregion

    }

    #endregion

}

namespace MusicRecord.Internals
{
    #region Field Index
    public enum Track_FieldIndex
    {
        Name = 0,
        Liked = 1,
        SpotifyID = 2,
        Tags = 3,
    }
    #endregion

    #region Registration
    public class Track_Registration : ILoquiRegistration
    {
        public static readonly Track_Registration Instance = new Track_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_MusicRecord.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_MusicRecord.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "d598fb6d-a730-4b4e-91fc-bb937604de65";

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(Track_Mask<>);

        public static readonly Type ErrorMaskType = typeof(Track_ErrorMask);

        public static readonly Type ClassType = typeof(Track);

        public static readonly Type GetterType = typeof(ITrackGetter);

        public static readonly Type SetterType = typeof(ITrack);

        public static readonly Type CommonType = typeof(TrackCommon);

        public const string FullName = "MusicRecord.Track";

        public const string Name = "Track";

        public const string Namespace = "MusicRecord";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NAME":
                    return (ushort)Track_FieldIndex.Name;
                case "LIKED":
                    return (ushort)Track_FieldIndex.Liked;
                case "SPOTIFYID":
                    return (ushort)Track_FieldIndex.SpotifyID;
                case "TAGS":
                    return (ushort)Track_FieldIndex.Tags;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Tags:
                    return true;
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    return "Name";
                case Track_FieldIndex.Liked:
                    return "Liked";
                case Track_FieldIndex.SpotifyID:
                    return "SpotifyID";
                case Track_FieldIndex.Tags:
                    return "Tags";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    return typeof(String);
                case Track_FieldIndex.Liked:
                    return typeof(Boolean);
                case Track_FieldIndex.SpotifyID:
                    return typeof(String);
                case Track_FieldIndex.Tags:
                    return typeof(NotifyingList<String>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TrackCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITrack item,
            ITrackGetter rhs,
            ITrackGetter def,
            ErrorMaskBuilder errorMask,
            Track_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.Name ?? true)
            {
                errorMask?.PushIndex((int)Track_FieldIndex.Name);
                item.Name = rhs.Name;
                errorMask?.PopIndex();
            }
            if (copyMask?.Liked ?? true)
            {
                errorMask?.PushIndex((int)Track_FieldIndex.Liked);
                item.Liked = rhs.Liked;
                errorMask?.PopIndex();
            }
            if (copyMask?.SpotifyID ?? true)
            {
                errorMask?.PushIndex((int)Track_FieldIndex.SpotifyID);
                item.SpotifyID = rhs.SpotifyID;
                errorMask?.PopIndex();
            }
            if (copyMask?.Tags != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)Track_FieldIndex.Tags);
                try
                {
                    item.Tags.SetToWithDefault(
                        rhs.Tags,
                        def?.Tags,
                        cmds);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITrack obj,
            NotifyingFireParameters cmds = null)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITrack obj,
            NotifyingUnsetParameters cmds = null)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    obj.Name = default(String);
                    break;
                case Track_FieldIndex.Liked:
                    obj.Liked = default(Boolean);
                    break;
                case Track_FieldIndex.SpotifyID:
                    obj.SpotifyID = default(String);
                    break;
                case Track_FieldIndex.Tags:
                    obj.Tags.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITrack obj)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                case Track_FieldIndex.Liked:
                case Track_FieldIndex.SpotifyID:
                case Track_FieldIndex.Tags:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITrackGetter obj)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    return obj.Name;
                case Track_FieldIndex.Liked:
                    return obj.Liked;
                case Track_FieldIndex.SpotifyID:
                    return obj.SpotifyID;
                case Track_FieldIndex.Tags:
                    return obj.Tags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITrack item,
            NotifyingUnsetParameters cmds = null)
        {
            item.Name = default(String);
            item.Liked = default(Boolean);
            item.SpotifyID = default(String);
            item.Tags.Unset(cmds.ToUnsetParams());
        }

        public static Track_Mask<bool> GetEqualsMask(
            this ITrackGetter item,
            ITrackGetter rhs)
        {
            var ret = new Track_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITrackGetter item,
            ITrackGetter rhs,
            Track_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Liked = item.Liked == rhs.Liked;
            ret.SpotifyID = object.Equals(item.SpotifyID, rhs.SpotifyID);
            ret.Tags = new MaskItem<bool, IEnumerable<bool>>();
            ret.Tags.Specific = item.Tags.SelectAgainst<String, bool>(rhs.Tags, ((l, r) => object.Equals(l, r)), out ret.Tags.Overall);
            ret.Tags.Overall = ret.Tags.Overall && ret.Tags.Specific.All((b) => b);
        }

        public static string ToString(
            this ITrackGetter item,
            string name = null,
            Track_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITrackGetter item,
            FileGeneration fg,
            string name = null,
            Track_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(Track)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(Track)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {item.Name}");
                }
                if (printMask?.Liked ?? true)
                {
                    fg.AppendLine($"Liked => {item.Liked}");
                }
                if (printMask?.SpotifyID ?? true)
                {
                    fg.AppendLine($"SpotifyID => {item.SpotifyID}");
                }
                if (printMask?.Tags?.Overall ?? true)
                {
                    fg.AppendLine("Tags =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Tags)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITrackGetter item,
            Track_Mask<bool?> checkMask)
        {
            if (checkMask.Tags.Overall.HasValue && checkMask.Tags.Overall.Value != item.Tags.HasBeenSet) return false;
            return true;
        }

        public static Track_Mask<bool> GetHasBeenSetMask(ITrackGetter item)
        {
            var ret = new Track_Mask<bool>();
            ret.Name = true;
            ret.Liked = true;
            ret.SpotifyID = true;
            ret.Tags = new MaskItem<bool, IEnumerable<bool>>(item.Tags.HasBeenSet, null);
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            Track item,
            bool doMasks,
            out Track_ErrorMask errorMask,
            Track_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                node: node,
                name: name,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = Track_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            Track item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "MusicRecord.Track");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "MusicRecord.Track");
            }
            if ((translationMask?.GetShouldTranslate((int)Track_FieldIndex.Name) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Name),
                    item: item.Name,
                    fieldIndex: (int)Track_FieldIndex.Name,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Track_FieldIndex.Liked) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.Liked),
                    item: item.Liked,
                    fieldIndex: (int)Track_FieldIndex.Liked,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Track_FieldIndex.SpotifyID) ?? true))
            {
                StringXmlTranslation.Instance.Write(
                    node: elem,
                    name: nameof(item.SpotifyID),
                    item: item.SpotifyID,
                    fieldIndex: (int)Track_FieldIndex.SpotifyID,
                    errorMask: errorMask);
            }
            if ((translationMask?.GetShouldTranslate((int)Track_FieldIndex.Tags) ?? true))
            {
                ListXmlTranslation<String>.Instance.Write(
                    node: elem,
                    name: nameof(item.Tags),
                    item: item.Tags,
                    fieldIndex: (int)Track_FieldIndex.Tags,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)Track_FieldIndex.Tags),
                    transl: (XElement subNode, String subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        StringXmlTranslation.Instance.Write(
                            node: subNode,
                            name: null,
                            item: subItem,
                            errorMask: listSubMask);
                    }
                    );
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class Track_Mask<T> : IMask<T>, IEquatable<Track_Mask<T>>
    {
        #region Ctors
        public Track_Mask()
        {
        }

        public Track_Mask(T initialValue)
        {
            this.Name = initialValue;
            this.Liked = initialValue;
            this.SpotifyID = initialValue;
            this.Tags = new MaskItem<T, IEnumerable<T>>(initialValue, null);
        }
        #endregion

        #region Members
        public T Name;
        public T Liked;
        public T SpotifyID;
        public MaskItem<T, IEnumerable<T>> Tags;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is Track_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(Track_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.Name, rhs.Name)) return false;
            if (!object.Equals(this.Liked, rhs.Liked)) return false;
            if (!object.Equals(this.SpotifyID, rhs.SpotifyID)) return false;
            if (!object.Equals(this.Tags, rhs.Tags)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.Name?.GetHashCode());
            ret = ret.CombineHashCode(this.Liked?.GetHashCode());
            ret = ret.CombineHashCode(this.SpotifyID?.GetHashCode());
            ret = ret.CombineHashCode(this.Tags?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.Name)) return false;
            if (!eval(this.Liked)) return false;
            if (!eval(this.SpotifyID)) return false;
            if (this.Tags != null)
            {
                if (!eval(this.Tags.Overall)) return false;
                if (this.Tags.Specific != null)
                {
                    foreach (var item in this.Tags.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public Track_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new Track_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(Track_Mask<R> obj, Func<T, R> eval)
        {
            obj.Name = eval(this.Name);
            obj.Liked = eval(this.Liked);
            obj.SpotifyID = eval(this.SpotifyID);
            if (Tags != null)
            {
                obj.Tags = new MaskItem<R, IEnumerable<R>>();
                obj.Tags.Overall = eval(this.Tags.Overall);
                if (Tags.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.Tags.Specific = l;
                    foreach (var item in Tags.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.Tags.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(Track_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, Track_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(Track_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.Name ?? true)
                {
                    fg.AppendLine($"Name => {Name}");
                }
                if (printMask?.Liked ?? true)
                {
                    fg.AppendLine($"Liked => {Liked}");
                }
                if (printMask?.SpotifyID ?? true)
                {
                    fg.AppendLine($"SpotifyID => {SpotifyID}");
                }
                if (printMask?.Tags?.Overall ?? true)
                {
                    fg.AppendLine("Tags =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Tags.Overall != null)
                        {
                            fg.AppendLine(Tags.Overall.ToString());
                        }
                        if (Tags.Specific != null)
                        {
                            foreach (var subItem in Tags.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class Track_ErrorMask : IErrorMask, IErrorMask<Track_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception Name;
        public Exception Liked;
        public Exception SpotifyID;
        public MaskItem<Exception, IEnumerable<Exception>> Tags;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    return Name;
                case Track_FieldIndex.Liked:
                    return Liked;
                case Track_FieldIndex.SpotifyID:
                    return SpotifyID;
                case Track_FieldIndex.Tags:
                    return Tags;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    this.Name = ex;
                    break;
                case Track_FieldIndex.Liked:
                    this.Liked = ex;
                    break;
                case Track_FieldIndex.SpotifyID:
                    this.SpotifyID = ex;
                    break;
                case Track_FieldIndex.Tags:
                    this.Tags = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            Track_FieldIndex enu = (Track_FieldIndex)index;
            switch (enu)
            {
                case Track_FieldIndex.Name:
                    this.Name = (Exception)obj;
                    break;
                case Track_FieldIndex.Liked:
                    this.Liked = (Exception)obj;
                    break;
                case Track_FieldIndex.SpotifyID:
                    this.SpotifyID = (Exception)obj;
                    break;
                case Track_FieldIndex.Tags:
                    this.Tags = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (Name != null) return true;
            if (Liked != null) return true;
            if (SpotifyID != null) return true;
            if (Tags != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("Track_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"Name => {Name}");
            fg.AppendLine($"Liked => {Liked}");
            fg.AppendLine($"SpotifyID => {SpotifyID}");
            fg.AppendLine("Tags =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Tags.Overall != null)
                {
                    fg.AppendLine(Tags.Overall.ToString());
                }
                if (Tags.Specific != null)
                {
                    foreach (var subItem in Tags.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public Track_ErrorMask Combine(Track_ErrorMask rhs)
        {
            var ret = new Track_ErrorMask();
            ret.Name = this.Name.Combine(rhs.Name);
            ret.Liked = this.Liked.Combine(rhs.Liked);
            ret.SpotifyID = this.SpotifyID.Combine(rhs.SpotifyID);
            ret.Tags = new MaskItem<Exception, IEnumerable<Exception>>(this.Tags.Overall.Combine(rhs.Tags.Overall), new List<Exception>(this.Tags.Specific.And(rhs.Tags.Specific)));
            return ret;
        }
        public static Track_ErrorMask Combine(Track_ErrorMask lhs, Track_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static Track_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new Track_ErrorMask();
        }
        #endregion

    }
    public class Track_CopyMask
    {
        #region Members
        public bool Name;
        public bool Liked;
        public bool SpotifyID;
        public CopyOption Tags;
        #endregion

    }
    public class Track_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool Name;
        public bool Liked;
        public bool SpotifyID;
        public bool Tags;
        #endregion

        #region Ctors
        public Track_TranslationMask()
        {
        }

        public Track_TranslationMask(bool defaultOn)
        {
            this.Name = defaultOn;
            this.Liked = defaultOn;
            this.SpotifyID = defaultOn;
            this.Tags = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((Name, null));
            ret.Add((Liked, null));
            ret.Add((SpotifyID, null));
            ret.Add((Tags, null));
        }
    }
    #endregion

    #endregion

}
